// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/automatic/consensus.go

// Package automatic is a generated GoMock package.
package automatic

import (
	reflect "reflect"

	"github.com/expandorg/verification/pkg/externalsvc"
	"github.com/expandorg/verification/pkg/verification"
	gomock "github.com/golang/mock/gomock"
)

// MockConsensus is a mock of Consensus interface
type MockConsensus struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusMockRecorder
}

// MockConsensusMockRecorder is the mock recorder for MockConsensus
type MockConsensusMockRecorder struct {
	mock *MockConsensus
}

// NewMockConsensus creates a new mock instance
func NewMockConsensus(ctrl *gomock.Controller) *MockConsensus {
	mock := &MockConsensus{ctrl: ctrl}
	mock.recorder = &MockConsensusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsensus) EXPECT() *MockConsensusMockRecorder {
	return m.recorder
}

// Verify mocks base method
func (m *MockConsensus) Verify(r verification.TaskResponse, set *verification.Settings) (externalsvc.VerificationResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", r, set)
	ret0, _ := ret[0].([]externalsvc.VerificationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify
func (mr *MockConsensusMockRecorder) Verify(r, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockConsensus)(nil).Verify), r, s)
}
